// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./database";
export * from "./grant";
export * from "./provider";
export * from "./role";
export * from "./user";
export * from "./userPassword";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { Database } from "./database";
import { Grant } from "./grant";
import { Role } from "./role";
import { User } from "./user";
import { UserPassword } from "./userPassword";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mysql:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "mysql:index/grant:Grant":
                return new Grant(name, <any>undefined, { urn })
            case "mysql:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "mysql:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "mysql:index/userPassword:UserPassword":
                return new UserPassword(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mysql", "index/database", _module)
pulumi.runtime.registerResourceModule("mysql", "index/grant", _module)
pulumi.runtime.registerResourceModule("mysql", "index/role", _module)
pulumi.runtime.registerResourceModule("mysql", "index/user", _module)
pulumi.runtime.registerResourceModule("mysql", "index/userPassword", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("mysql", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mysql") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
